Առաջադրանքի անունը՝   mini_paint
Ակնկալվող ֆայլեր՝ *.c *.h
Թույլատրված ֆունկցիաներ՝  fopen, fread, fscanf, fclose, write, malloc, calloc, realloc, free, memset, powf, sqrtf
--------------------------------------------------------------------------------------

Գրել ծրագիր, որը կկարդա մի «operation file» և արդյունքը կտպի տերմինալում։

Ձեր ծրագիրը պետք է ստանա մեկ արգումենտ, այն կլինի «operation file» տանող ուղին՝ STDOUT-ում \n-ով հաջորդված։
Եթե 0 կամ 1-ից ավելի արգումենտ է տրված ձեր ծրագրին, գրե՛ք «Error: argument»՝ STDOUT-ում \n-ով հաջորդված։   

$> ./mini_paint | cat -e
Error: argument$
$> ./mini_paint do not fear mathematics | cat -e
Error: argument$
$> 

Եթե ինչ-որ խնդիր առաջանա, քանի դեռ բացում և/կամ կարդում եք «operation file»-ը, գրե՛ք «Error: Operation file corrupted»՝ STDOUT-ում \n-ով հաջորդված։

«operation file»-ը ամեն տողում պետք է պարունակի մեկական գործողություն։
Եթե որևէ տող ճիշտ չլինի, սխալ կառաջանա։
Եթե սխալ առաջանա, ձեր ծրագիրը կվերադարձնի 1։
Եթե ոչ մի սխալ չառաջանա, ծրագիրը կվերադարձնի 0։
Վերջին տողը կարող է լինել \n-ով կամ առանց դրա։
Տողերը պետք է կարդացվեն հերթականությամբ ու, հետևաբար, գործողությունները պետք է իրականացվեն նույն հերթականությամբ։
Տողում երկու փոփոխականների միջև պետք է լինի գոնե մեկ բացատ

ԼԱՅՆՈՒԹՅՈՒՆ ԲԱՐՁՐՈՒԹՅՈՒՆ BACKGROUND_CHAR
Այս տողը միշտ ֆայլի առաջին տողն է և այն սահմանում է՝ որտեղ գծել։ Ձեր ծրագիրը գծված գոտուց դուրս ոչինչ չպիտի արտածի։ Պետք է այնտեղ լինի միայն մեկ անգամ։
- ԼԱՅՆՈՒԹՅՈՒՆ․ պետք է լինի int 0 < WIDTH <= 300-ով, հորիզոնական նիշերի քանակն է գծված գոտում գործածվելու համար։
- ԲԱՐՁՐՈՒԹՅՈՒՆ․ պետք է լինի 0 < HEIGHT <= 300-ով, ուղղահայաց նիշերի քանակն է գծված գոտում գործածվելու համար։
- BACKGROUND_CHAR: յուրաքանչյուր դատարկ տարածք կլրացվի BACKGROUND_CHAR-ով

c X Y շառավիղ CHAR
Այս գործողությունը դատարկ շրջանագիծ կգծի, որտեղ միայն շրջանագծի եզրն է գծված
- c․ գրանիշ 
- X․ սահող կետով թիվ, շրջանագծի կենտրոնի հորիզոնական դիրքն է
- Y․ սահող կետով թիվ, շրջանագծի կենտրոնի ուղղահայաց դիրքն է
- RADIUS․ սահող կետով թիվ, բայց ոչ 0, շրջանագծի շառավիղն է
- CHAR․ շրջանագիծը գծելու համար գործածված char-ը

C X Y RADIUS CHAR
Այս գործողությունը լրացված շրջանագիծ կգծի
- c․ c նիշը
- X․ սահող կետով թիվ, շրջանագծի կենտրոնի հորիզոնական դիրքն է
- Y․ սահող կետով թիվ, շրջանագծի կենտրոնի ուղղահայաց դիրքն է
- RADIUS․ սահող կետով թիվ, բայց ոչ 0, շրջանագծի շառավիղն է
- CHAR․ շրջանագիծը գծելու համար գործածված char-ը

Գծված գոտին բաժանված է ուղղանկյունների, որոնցից յուրաքանչյուրը կարող է պարունակել մեկական գրանիշ․ (քանի որ տերմինալի մեջ ենք) դրանց կանվանենք պիքսել։
Ամեն ինչ ավելի հեշտ դարձնելու համար, միայն կգործածենք պիքսելի վերին ձախ անկյունը՝ պարզելու համար, թե պիքսելը այն շրջանագծի մեջ է թե ոչ։
Եթե պիքսելի վերին ձախ անկյան ու շրջանագծի կենտրոնի հեռավորությունը փոքր է կամ հավասար շրջանագծի շառավղին, ապա պիքսելը շրջանագծի մաս է
բայց նաև․
       պիքսելը, որի վերին ձախ անկյան հեռավորությունը շրջանագծի եզրից մեծ է կամ հավասար է 1-ի, դատարկ շրջանագծի մաս չէ,
       պիքսելը, որի վերին ձախ անկյան հեռավորությունը շրջանագծի եզրից փոքր է կամ հավասար է 1-ի, դատարկ շրջանագծի մաս է։
       

Հաջորդ մի քանի տողերը կարդալիս նայե՛ք նկարին։ Այն ներկայացնում է մի տերմինալ։ Մենք սահմանել ենք 5 ԼԱՅՆՈՒԹՅԱՄԲ և 3 ԵՐԿԱՐՈՒԹՅԱՄԲ գծելու գոտի։
Մենք ուրիշ նիշեր ենք գրել՝ հետևյալ բացատրությունը հասկանալի դարձնելու համար։
- Եթե ուզում եք գործողությունը գծել, C 1.5 1.5 1 @ (վարդագույն շրջանագիծը)
- - Նշանակում է, որ նկարի միջի 'b', 'c', 'B', 'C' նիշերը կփոխարինվեն '@'-ով

Լավ կլինի, որ գտնեք our_mini_paint-ը․ այն կօգնի փորձարկել ձեր ծրագիրը ինչ-որ operation_file.example-ով։

Հուշում։
Եթե ունեք 2 սահմանված կետ ինչպես՝ (Xa,Ya) և (Xb,Yb), երկու կետերի հեռավորությունը կարող եք գտնել այս բանաձևի միջոցով՝ srqt((Xa - Xb) * (Xa - Xb) + (Ya - Yb) * (Ya - Yb))։
